---
# FreeHekim RAG API - Ansible Playbook
# Configuration management for production servers

- name: Configure FreeHekim RAG API Server
  hosts: production
  become: yes
  vars:
    app_user: freehekim
    app_dir: /home/freehekim/apps/freehekim-rag-api
    docker_compose_version: "2.24.0"

  tasks:
    # System Updates
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade all packages
      apt:
        upgrade: dist

    # Docker Installation
    - name: Install Docker dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Add user to docker group
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes

    # Docker Compose
    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    # Security
    - name: Configure UFW
      ufw:
        rule: "{{ item.rule }}"
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      loop:
        - { rule: 'allow', port: '22', proto: 'tcp' }
        - { rule: 'allow', port: '80', proto: 'tcp' }
        - { rule: 'allow', port: '443', proto: 'tcp' }

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny

    - name: Install fail2ban
      apt:
        name: fail2ban
        state: present

    - name: Start fail2ban
      service:
        name: fail2ban
        state: started
        enabled: yes

    # Application Directory
    - name: Create app directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    # Environment Files
    - name: Copy .env file
      template:
        src: templates/env.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'

    # Monitoring
    - name: Create monitoring directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
      loop:
        - /home/{{ app_user }}/prometheus-data
        - /home/{{ app_user }}/grafana-data

    # Backup Setup
    - name: Create backup script
      template:
        src: templates/backup.sh.j2
        dest: /usr/local/bin/backup-freehekim-rag
        mode: '0755'

    - name: Setup backup cron job
      cron:
        name: "FreeHekim RAG Backup"
        minute: "0"
        hour: "2"
        job: "/usr/local/bin/backup-freehekim-rag"
        user: "{{ app_user }}"

    # Cloudflare Tunnel
    - name: Install cloudflared
      get_url:
        url: https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
        dest: /usr/local/bin/cloudflared
        mode: '0755'

    # System Tuning
    - name: Set system limits
      pam_limits:
        domain: "*"
        limit_type: "{{ item.type }}"
        limit_item: "{{ item.item }}"
        value: "{{ item.value }}"
      loop:
        - { type: 'soft', item: 'nofile', value: '65536' }
        - { type: 'hard', item: 'nofile', value: '65536' }

    - name: Configure sysctl
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'vm.swappiness', value: '10' }
        - { name: 'net.core.somaxconn', value: '1024' }
        - { name: 'net.ipv4.tcp_max_syn_backlog', value: '2048' }

  handlers:
    - name: restart docker
      service:
        name: docker
        state: restarted
