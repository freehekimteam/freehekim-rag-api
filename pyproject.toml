# FreeHekim RAG API - Python Project Configuration
# Modern Python packaging and tooling configuration

[project]
name = "freehekim-rag-api"
version = "2.2.2"
description = "Retrieval-Augmented Generation (RAG) API for FreeHekim medical content"
authors = [
    {name = "FreeHekim Team", email = "dev@hakancloud.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["rag", "fastapi", "medical", "ai", "vector-search"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[project.urls]
Homepage = "https://github.com/freehekimteam/freehekim-rag-api"
Documentation = "https://github.com/freehekimteam/freehekim-rag-api/blob/main/README.md"
Repository = "https://github.com/freehekimteam/freehekim-rag-api"
Issues = "https://github.com/freehekimteam/freehekim-rag-api/issues"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

# ============================================================================
# Ruff Configuration - Fast Python linter & formatter
# ============================================================================
[tool.ruff]
# Exclude common directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black
line-length = 100
indent-width = 4

# Target Python 3.11+
target-version = "py311"

[tool.ruff.lint]
# Enable these rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade (modernize Python code)
    "B",      # flake8-bugbear (find likely bugs)
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "RUF",    # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults (FastAPI Depends)
    "UP007",  # Use X | Y for type annotations (we use Union for Python 3.9 compat)
]

# Allow fix for all enabled rules (when `--fix` is provided)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Auto-detect line endings
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["fastapi", "rag", "config"]

# ============================================================================
# MyPy Configuration - Static type checker
# ============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Ignore missing imports for third-party packages without stubs
[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "prometheus_fastapi_instrumentator.*",
]
ignore_missing_imports = true

# ============================================================================
# Pytest Configuration - Testing framework
# ============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",                    # Show summary of all test outcomes
    "--strict-markers",       # Error on undefined markers
    "--strict-config",        # Error on invalid config
    "--showlocals",          # Show local variables in tracebacks
    "-v",                    # Verbose output
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Markers for organizing tests
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (requires Qdrant, OpenAI)",
    "slow: Slow-running tests",
    "smoke: Smoke tests (quick health checks)",
]

# ============================================================================
# Coverage Configuration - Code coverage measurement
# ============================================================================
[tool.coverage.run]
source = ["fastapi"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
